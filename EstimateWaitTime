package SMTravelSimulation;
import simulationModelling.ExtSequelActivity;
import simulationModelling.SequelActivity;
/*
 * Extended Sequel Activity EstimateWaitTime
 */
public class EstimateWaitTime extends ExtSequelActivity{
	
	SMTravel model;
	private Call icCall;

	
	 // Constructor
	EstimateWaitTime(SMTravel model, Call icCall){
		this.model = model;
		this.icCall = icCall;	
	}
	EstimateWaitTime(SMTravel model){} //created this for interruption preconditon in smtravel class
	
	public void startingEvent() {
		icCall.startWaitTime = model.getClock(); 	
	}
	
	protected double duration() {
		return Constants.EWTVOICEDURATION;
	}
	
	public static int interruptionPreCond(SMTravel model){  // added the smtravel model for interruption preconditon in smtravel class
		int interruptID = 0;
		if((model.udp.CanServiceCall(icCall.uCuType) != null) && (CheckEmptyQueue(icCall.uCuType) == true)) 
			interruptID = 1;
		
		return interruptID;
	}
	public void interruptionSCS(int interruptID){
		interruptID = interruptionPreCond();
		if (interruptID == 1) {
			model.spInsertQue(model.qCallLine[icCall.uCuType], icCall);
			model.spTerminate();
		}
	}
	protected void terminatingEvent() {
	double waitTime = CalculateWaitTime(icCall.uCuType);
		if(model.rvp.uWaitTmTolerance(icCall.uCuType) < waitTime) {
			model.spLeave(icCall);
		}
		else {
			model.spInsertQue(model.qCallLine[icCall.uCuType], icCall);
		}
	}

 /*------------------------------------   Embedded UDPs   ----------------------------------------------*/
	/* Method: CalculateWaitTime
	 * Description: Calculates the wait time of the customer call
	 * Parameter: Customer Type
	 * Return: the wait time
	 */
	public double CalculateWaitTime(int uCuType) {
		
		icCall.waitTime = -1; //// not sure about this, we don't have wait time anywhere
		if(uCuType == Constants.REGULAR) {
			icCall.waitTime = Constants.EWTDURATION * model.qCallLine[Constants.GOLD].n + model.qCallLine[Constants.SILVER].n + model.qCallLine[Constants.REGULAR].n;
		}
		if(uCuType == Constants.SILVER) {
			icCall.waitTime = Constants.EWTDURATION * model.qCallLine[Constants.GOLD].n + model.qCallLine[Constants.SILVER].n;
		}
		if(uCuType == Constants.GOLD) {
			icCall.waitTime = Constants.EWTDURATION * model.qCallLine[Constants.GOLD].n;
		}
		
		return icCall.waitTime;
	}	
	
	/* Method: CheckEmptyQueue
	 * Description: checks the queue to find empty place
	 * Parameter: Customer Type
	 * Return: true if there is empty spot, false otherwise
	 */
	public boolean CheckEmptyQueue(int uCuType){
		if(model.qCallLine[uCuType] == null)
			return true;
		else
			return false;
		
	}
}

